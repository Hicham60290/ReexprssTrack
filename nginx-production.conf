# ==============================================================================
# NGINX Configuration for ReExpressTrack - Docker Production
# ==============================================================================

# HTTP -> HTTPS Redirect
server {
    listen 80;
    listen [::]:80;
    server_name reexpresstrack.com www.reexpresstrack.com;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS Server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name reexpresstrack.com www.reexpresstrack.com;

    # SSL Certificates (configured by Certbot)
    ssl_certificate /etc/letsencrypt/live/reexpresstrack.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/reexpresstrack.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/reexpresstrack.com/chain.pem;

    # Modern SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Resolver for OCSP stapling
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.stripe.com https://reexpresstrack.com; frame-src 'self' https://js.stripe.com;" always;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json application/javascript image/svg+xml;

    # Client body size (for file uploads)
    client_max_body_size 10M;

    # ==============================================================================
    # API BACKEND PROXY
    # ==============================================================================
    location /api {
        # Proxy to backend Docker container
        proxy_pass http://127.0.0.1:3000;

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffering
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # ==============================================================================
    # BACKEND HEALTH CHECK
    # ==============================================================================
    location /health {
        proxy_pass http://127.0.0.1:3000/health;
        proxy_set_header Host $host;
        access_log off;
    }

    # ==============================================================================
    # FRONTEND STATIC FILES & SPA ROUTING
    # ==============================================================================
    location / {
        # Proxy to frontend Docker container (Nginx serving React build)
        proxy_pass http://127.0.0.1:8080;

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Cache control for HTML
        proxy_hide_header Cache-Control;
        add_header Cache-Control "public, must-revalidate, max-age=3600";
    }

    # ==============================================================================
    # STATIC ASSETS CACHING
    # ==============================================================================
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;

        # Long-term caching for static assets with hash in filename
        proxy_hide_header Cache-Control;
        add_header Cache-Control "public, immutable, max-age=31536000";
        access_log off;
    }

    # ==============================================================================
    # SECURITY: BLOCK SENSITIVE FILES
    # ==============================================================================
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|git|gitignore|md)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # ==============================================================================
    # LOGS
    # ==============================================================================
    access_log /var/log/nginx/reexpresstrack_access.log;
    error_log /var/log/nginx/reexpresstrack_error.log;
}

# ==============================================================================
# CONFIGURATION NOTES
# ==============================================================================
#
# This configuration assumes:
#   - Backend API running on localhost:3000 (Docker container)
#   - Frontend running on localhost:8080 (Docker container)
#   - SSL certificates managed by Certbot
#
# To apply this configuration:
#   sudo cp nginx-production.conf /etc/nginx/sites-available/reexpresstrack
#   sudo ln -sf /etc/nginx/sites-available/reexpresstrack /etc/nginx/sites-enabled/
#   sudo nginx -t
#   sudo systemctl reload nginx
#
# ==============================================================================
