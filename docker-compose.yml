services:
  # ===========================================
  # POSTGRESQL DATABASE
  # ===========================================
  postgres:
    image: postgres:16-alpine
    container_name: reexpresstrack_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reexpresstrack
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=fr_FR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - reexpresstrack_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # REDIS CACHE & QUEUE
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: reexpresstrack_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reexpresstrack_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # MINIO (S3-compatible Storage)
  # ===========================================
  minio:
    image: minio/minio:latest
    container_name: reexpresstrack_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console Web
    volumes:
      - minio_data:/data
    networks:
      - reexpresstrack_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ===========================================
  # BACKEND API
  # ===========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: reexpresstrack_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/reexpresstrack
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - reexpresstrack_network

  # ===========================================
  # FRONTEND (React + Vite)
  # ===========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: reexpresstrack_frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3000/api/v1
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - reexpresstrack_network

  # ===========================================
  # NGINX (Reverse Proxy & Load Balancer)
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: reexpresstrack_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - reexpresstrack_network

  # ===========================================
  # ADMINER (Database Management)
  # ===========================================
  adminer:
    image: adminer:latest
    container_name: reexpresstrack_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - reexpresstrack_network

  # ===========================================
  # REDIS COMMANDER (Redis Management)
  # ===========================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: reexpresstrack_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - reexpresstrack_network

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

# ===========================================
# NETWORKS
# ===========================================
networks:
  reexpresstrack_network:
    driver: bridge


# ===========================================
# DOCKER COMPOSE COMMANDS
# ===========================================
# 
# Démarrer tous les services:
#   docker-compose up -d
#
# Voir les logs:
#   docker-compose logs -f [service_name]
#
# Arrêter tous les services:
#   docker-compose down
#
# Arrêter et supprimer les volumes:
#   docker-compose down -v
#
# Rebuild les images:
#   docker-compose up -d --build
#
# Accéder à un service:
#   docker-compose exec [service_name] sh
#
# ===========================================
